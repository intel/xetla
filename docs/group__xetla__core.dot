digraph "XeTLA Core"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir=LR;
  Node1 [id="Node000001",label="XeTLA Core",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="This is a low-level API wrapper for ESIMD."];
  Node11 [id="Node000011",label="Arch config information",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__xetla__core__arch__config.html",tooltip="Defines some hardware arch related information, mainly used to do HW limitation check."];
  Node5 [id="Node000005",label="Synchronization APIs",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__xetla__core__barrier.html",tooltip="Defines XeTLA APIs for synchronization primitives."];
  Node3 [id="Node000003",label="Base ops",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__xetla__core__base__ops.html",tooltip="Defines base ops for vector, vector reference and matrix reference data types."];
  Node2 [id="Node000002",label="Base types",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__xetla__core__base__types.html",tooltip="Defines vector, vector reference and matrix reference data types."];
  Node7 [id="Node000007",label="Bit and mask manipulation APIs",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__xetla__core__bit__manipulation.html",tooltip="Defines bitwise operations."];
  Node8 [id="Node000008",label="Explicit conversion APIs",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__xetla__core__conv.html",tooltip="Defines explicit conversions (with and without saturation), truncation etc."];
  Node6 [id="Node000006",label="Math operation APIs",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__xetla__core__math.html",tooltip="Defines math operations on XeTLA vector data types."];
  Node4 [id="Node000004",label="Memory access APIs",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__xetla__core__memory.html",tooltip="Defines XeTLA APIs to access memory, including read, write and atomic."];
  Node10 [id="Node000010",label="Miscellaneous XeTLA\l convenience functions",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__xetla__core__misc.html",tooltip="Wraps some useful functions."];
  Node9 [id="Node000009",label="Raw send APIs",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__xetla__core__raw__send.html",tooltip="Implements the send instruction to send messages to variaous components of the Intel(R) processor gra..."];
  Node1->Node2 [shape=plaintext, dir="back", style="solid"];
  Node1->Node3 [shape=plaintext, dir="back", style="solid"];
  Node1->Node4 [shape=plaintext, dir="back", style="solid"];
  Node1->Node5 [shape=plaintext, dir="back", style="solid"];
  Node1->Node6 [shape=plaintext, dir="back", style="solid"];
  Node1->Node7 [shape=plaintext, dir="back", style="solid"];
  Node1->Node8 [shape=plaintext, dir="back", style="solid"];
  Node1->Node9 [shape=plaintext, dir="back", style="solid"];
  Node1->Node10 [shape=plaintext, dir="back", style="solid"];
  Node1->Node11 [shape=plaintext, dir="back", style="solid"];
}
